# How to set up a **forgot my password** system in laravel(Mailtrap.io).

This guide will explain how to setup a reset password system in laravel using an emailing service, assuming you've already
built your basic **singin/login** system so that the only thing to implement is the system in quiestion.
For this example we'll use Mailtrap as our emailing service.

---

## âœ… Prerequisites

- Laravel app can be loaded with no issues
- signin/login system has already been created.

--- 

## 1. Configure Email settings in .env

Go to mailtrap.io and create an account, go to sandbox and create a new inbox,go to your new inbox, in the integration
section click on **php** down below and follow the code example to configure emial settings according to your credentias.

Open the .env file and configure your mail settings. Laravel uses the MAIL_DRIVER, MAIL_HOST, MAIL_PORT, MAIL_USERNAME, 
and MAIL_PASSWORD variables to send emails. Choose an appropriate mail driver (e.g., SMTP) and provide the necessary credentials.

e.g

MAIL_DRIVER=smtp
MAIL_ENCRYPTION=tls
MAIL_HOST=your-smtp-host
MAIL_PORT=your-smtp-port
MAIL_USERNAME=your-smtp-username
MAIL_PASSWORD=your-smtp-password
MAIL_FROM_ADDRESS=your-email@example.com
MAIL_FROM_NAME="${APP_NAME}"

---

## 2. Database configuration.

Laravel uses a database table **password_reset_tokens** to store token and email information 
for password reset requests. If this table doesnt exist already, run migrations

```bash`
php artisan migrate


---

## 3. Create routes.

We'll need to create the necessary routes to redirect the user to certain pages so they can reset their password and others to actually trigger the process of sending the reset link or actually just reset the password.

# a. The first route's whole purpose is to redirect the user to the page containing the form where they enter their email to request the reset password link:

```/routes/web.php:`

Route::get('/forgot-password', [ForgotPasswordController::class, 'create'])->name('password.create');

///
**NOTE**
The **ForgotPasswordController** class has a method called **create** that handles the redirect part, we manually define this method later on.
///

# b. The second route will be called upon when the user submits previous form(where they enter their email), so this route calls a method called **store** that will send the reset link to their email(in this case the email will be sent to your mailtrap inbox), we define thie method later on.

```/routes/web.php:`

Route::post('/forgot-password', [ForgotPasswordController::class, 'store'])->name('password.email');

///
**NOTE**
The **ForgotPasswordController** class has a method called **store** that handles the send reset link part, we manually define this method later on.
///

# c. The third route is for redirecting user to change their password.

This route will be called when the user clicks on the reset password link, this route's URL contains a **token** which gets stored in the
**password_resets** database table which has an expiration time of 30min and is for a one time use to enhance security, meaning when the password is successfully updated this token is deleted from the table.

This route calles a method within **ResetPasswordController** which uses one parameter called **$token** which contains the token in the
**password_reset_tokens** table, when the reset password form is submitted it asks for this token for verification so it is importan that we pass it to the
**reset-password.blade.php** file, we define this method later on anyways so we can see how it's done.

```/routes/web.php:`

Route::get('/reset-password/{token}', [ResetPasswordController::class, 'create'])->name('password.reset');

# d. The last route is for actually updating the password.

This route calls a method within **ResetPasswordController** called **store** that updated the password and short after the token in the
**password_resets** is deleted/

```/routes/web.php:`

Route::post('/reset-password', [ResetPasswordController::class, 'store'])->name('password.update');

---

## 4. Create reset password controllers

```bash`
php artisan make:controller ForgotPasswordController
php artisan make:controller ResetPasswordController

---

# a. Import Password facade.

- For both controllers we import the same facade at the top of the file:

~ use Illuminate\Support\Facades\Password;

This allows us to have access to the Password facade methods we'll use later.

This following class is only for the **ResetPasswordController** just so we can hash the new password when updating it:

~ use Illuminate\Support\Facades\Hash;

---

# b. These are the 2 methods inside the **ForgotPasswordController**

public function create() {
    return view('auth.forgot-password');
}

public function store(Request $request) {
    $input = $request->validate([
        'email' => 'required'
    ]);

    $status = Password::sendResetLink($input['email']);

    return $status === Password::RESET_LINK_SENT ? back()-> with('status', __($status)) : back()->withErrors(['email' => __($status)]);
}

# CODE EXPLANATION

The **create** method redirects the user to the page containing the form where the user enters their email to request the reset password link;
The **store** method takes the **Request** object as a parameter, validates an email was entered, the **Password::sendResetLink()** method takes
an array as a parameter for some reason and this array must contain the email we wanna send the link to (e.g. Password::sendResetLink(['email' => $request->email]) so it becomes a key-value pair), looks thru your users table for a user with this email address(It returns an error if it doesn't find any), If the user is found, Laravel generates a unique token and stores it in the password_resets table (or password_reset_tokens in newer versions).

The **Password::sendResetLink()** returns status strings such as:

~ Password::RESET_LINK_SENT (success)

~ Password::INVALID_USER (failure)

Afterwards we return the user back with a success/error message with the following line:

~ return $status === Password::RESET_LINK_SENT ? back()-> with('status', __($status)) : back()->withErrors(['email' => __($status)]);

# c. These are the 2 methods inside the **ResetPasswordController**

public function create($token) {
    return view('auth.reset-password', ['token' => $token]);
}

$status = Password::reset(
        $request->only('email', 'token', 'password', 'password_confirmation'),
        function ($user, $password) {
            $user->forceFill([
                'password' => Hash::make($password)
            ]);

            $user->save();
        }
    );

return $status === Password::PASSWORD_RESET ? redirect()->route('login.page')->with('success', __($status)) : back()->withErrors(['email' => __($status)]);


# CODE EXPLANATION

The **create** method in this controller will be called when the user goes check the email sent by the **store** method in the **ForgotPasswordController**, meaning this reset password link points to a route which name is specifically **password-reset**. this method takes a **$token** parameter which comes with the URL provided by the reset password link, then we redirect the user to the page containing the form where the user enters their email again, new password and the new password confirmation, inside this form we need to include the **$token** variable for verification with the **password_reset_tokens** table.

The **store** method is responsible for token verification and updating the password, it takes 2 parameters, the first one is an array containing the email, token, password and password_confirmation values, the other parameter is the function it executes when all values in the previous array are validated.

// Here's what Password::reset() does step by step: //

Validate the Token and User:

- It looks up the token in the password_resets (or password_reset_tokens) table.

- It ensures the token is valid and has not expired.

- It finds the user using the email field.

Check Credentials:

- It verifies the token matches the email and is still valid.

Call the Callback Closure:

- If everything is valid, it calls the callback you provide (as shown above), passing the resolved $user and the new $password.

Update the Password:

- Inside the callback, you hash the password and save it to the database (usually with bcrypt() or Hash::make()).

Delete the Token:

- The token is deleted from the password_resets table to prevent reuse.
---

## 5. Create reset password views.

Inside the views folder we create another folder called **resources/views/auth**, then we created 2 
new blade templates inside **resources/views/auth/**, the first one should be called **forgot-password.blade.php** 
and the other one **reset-password.blade.php**.

- There should be a link somewhere in your web page that redirects the users to the request reset link page, e.g:

<a href="{{route('password.create')}}">Forgot password?</a>


- The **forgot-password.blade.php** file should contain a form where the user can enter the email for the the account they
wanna reset their password for, e.g:

```resources/views/auth/forgot-password.blade.php:`

    <div class="forgot-password-form-wrapper">
        <form action="{{route('password.email')}}" method="POST">
            <div>
                <label for="email">Enter email</label>
                <br>
                <input type="text" name="email" id="email">
            </div>
            <button>send</button>
        </form>
        @if(session('status'))
            <p>{{session('status')}}</p>
        @endif
        @error('email')
            <p>{{$message}}</p>
        @enderror
    </div>


///
**NOTE**
The **session('status')** session attribute will hold success or error messages showing wether the reset password link 
was sent successfully, the error with the name **email** is for when there was an error in sending the email (This is defined in 
the store method inside the ForgotPasswordController file).
///

- The **reset-password.blade.php** file should contain a form where the user can enter the email for the the account they
wanna reset their password for, then the new password and the new password confirmation, e.g:

```resources/views/auth/reset-password.blade.php:`

    <div class="reset-password-form-wrapper">
        <form action="{{route('password.update')}}" method="POST">
            @csrf
            <div>
                <input type="hidden" name="token" value={{$token}}>
                <label for="email">Enter email</label>
                <br>
                <input type="text" name="email" id="email">
            </div>
            <div>
                <label for="password">Enter new password</label>
                <br>
                <input type="password" name="password" id="password">
            </div>
            <div>
                <label for="password-confirmation">Confirm password</label>
                <br>
                <input type="password" name="password_confirmation" id="password-confirmation">
            </div>
            <button>Update</button>
        </form>
        @if(session('status'))
            <p>{{session('status')}}</p>
        @endif
        @error('email')
            <p>{{$message}}</p>
        @enderror
    </div>

///
**NOTE**
The **session('status')** session attribute will hold success or error messages showing wether the password was resetted, the error with the name **email** is for when there was an error in updating password (This is defined in 
the store method inside the ResetPasswordController file).
///
